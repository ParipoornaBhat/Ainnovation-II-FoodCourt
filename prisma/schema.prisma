// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String? // ðŸ”‘ store hashed password
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  adminEvents   Event[]   @relation("AdminEvents")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =======================
// EVENT MODELS
// =======================

model Event {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  admin   User   @relation("AdminEvents", fields: [adminId], references: [id])
  adminId String

  teams     Team[]
  inventory Inventory?
  orders    Order[]
}

model Team {
  id        String   @id @default(cuid())
  teamId    Int      @unique @default(autoincrement())
  name      String
  username  String   @unique
  password  String // hashed password
  createdAt DateTime @default(now())

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  orders      Order[]
  credentials TeamCredential[]
}

model TeamCredential {
  id        String   @id @default(cuid())
  name      String
  email     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@index([teamId])
}

model Inventory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @unique

  inventoryItems InventoryItem[]
}

model InventoryItem {
  id              String @id @default(cuid())
  maxOrderPerTeam Int?

  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String

  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  foodItemId String

  createdAt DateTime @default(now())
}

model FoodItem {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  availableQty Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  restrictions String[]

  orderItems    OrderItem[]
  InventoryItem InventoryItem[]
}

model QuickLink {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatusType {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Order {
  id            Int             @id @default(autoincrement())
  totalAmount   Float
  paymentStatus String          @default("unpaid")
  orderStatus   OrderStatusType @default(PENDING) // pending | confirmed | completed | cancelled
  placedAt      DateTime        @default(now())

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  items OrderItem[]
}

model OrderItem {
  id           String @id @default(cuid())
  quantity     Int
  priceAtOrder Float

  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
  foodItemId String
}
